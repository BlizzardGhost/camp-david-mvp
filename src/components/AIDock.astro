---
/** Optional: if you want the React chat inside the panel, uncomment:
 * import AIChat from '@/components/AIChat.client';
 */
const label = 'Ask about Camp David';
---
<div id="aiDock" class="pointer-events-none">
  <!-- Toggle -->
  <button
    id="aiToggle"
    type="button"
    class="pointer-events-auto inline-flex items-center gap-2 rounded-full bg-neutral-900/95 px-4 py-2 text-sm font-semibold text-white shadow-lg ring-1 ring-white/10 backdrop-blur transition hover:bg-neutral-900 focus:outline-none focus-visible:ring-2 focus-visible:ring-white/50"
    aria-controls="aiPanel"
    aria-expanded="false"
  >
    <span class="inline-grid h-6 w-6 place-items-center rounded-full bg-white/10">
      <iconify-icon icon="mdi:chat-processing" width="16" height="16"></iconify-icon>
    </span>
    {label}
  </button>

  <!-- Panel -->
  <div
    id="aiPanel"
    class="pointer-events-auto mt-3 hidden w-[min(88vw,380px)] overflow-hidden rounded-xl bg-white text-neutral-900 shadow-2xl ring-1 ring-black/10"
    role="dialog"
    aria-modal="true"
    aria-labelledby="aiPanelTitle"
  >
    <div class="flex items-center justify-between border-b border-black/10 px-4 py-3">
      <h2 id="aiPanelTitle" class="text-[15px] font-semibold">Camp David Concierge</h2>
      <button id="aiClose" type="button" class="grid h-8 w-8 place-items-center rounded-full hover:bg-black/5" aria-label="Close">
        <svg viewBox="0 0 24 24" class="h-4 w-4"><path d="M18.3 5.7 12 12l6.3 6.3-1.4 1.4L10.6 13.4 4.3 19.7 2.9 18.3 9.2 12 2.9 5.7 4.3 4.3l6.3 6.3L16.9 4.3z"/></svg>
      </button>
    </div>

    <div class="px-4 py-3">
      <!-- Replace this placeholder with AIChat if you like -->
      <!-- <AIChat client:load /> -->
      <p class="text-[14px] leading-6 text-neutral-700">
        Hi! I can help with availability, cottages, and event planning. Ask me anything.
      </p>
      <form class="mt-3 flex gap-2">
        <input
          id="aiInput"
          class="min-w-0 flex-1 rounded-md border border-black/10 bg-black/[3%] px-3 py-2 text-[14px] outline-none focus:ring-2 focus:ring-neutral-900/20"
          placeholder="e.g., Is Lakefront open July 12–14?"
        />
        <button type="button" id="aiSend" class="rounded-md bg-neutral-900 px-4 text-[14px] font-semibold text-white hover:bg-neutral-800">
          Send
        </button>
      </form>
    </div>
  </div>
</div>

<style is:inline>
  /* Base position; JS will switch top/bottom. Extra-high z-index to sit above everything. */
  #aiDock{
    position: fixed;
    right: 16px;
    z-index: 70;
  }
</style>

<script is:inline>
(() => {
  const dock   = document.getElementById('aiDock');
  const toggle = document.getElementById('aiToggle');
  const panel  = document.getElementById('aiPanel');
  const close  = document.getElementById('aiClose');

  /** PLACEMENT
   *  - On first view: hugs the bottom edge of the navbar (if found)
   *  - After scrolling past the nav: sticks to bottom-right corner
   */
  const nav = document.querySelector('[data-site-nav]') || document.getElementById('siteNav');

  function placeDock() {
    const y = window.scrollY;
    let threshold = 64; // fallback if no nav
    if (nav) {
      const rect = nav.getBoundingClientRect();
      threshold = Math.max(0, rect.bottom + window.scrollY + 12);
    }
    if (y <= threshold) {
      // Anchor under the nav
      dock.style.top = `${nav ? (nav.getBoundingClientRect().bottom + window.scrollY + 12) : 12}px`;
      dock.style.bottom = 'auto';
    } else {
      // Float bottom-right
      dock.style.top = 'auto';
      dock.style.bottom = '16px';
    }
  }

  // OPEN/CLOSE
  function openPanel() {
    panel.classList.remove('hidden');
    toggle.setAttribute('aria-expanded', 'true');
    document.addEventListener('keydown', onEsc);
    document.addEventListener('click', clickAway, true);
  }
  function closePanel() {
    panel.classList.add('hidden');
    toggle.setAttribute('aria-expanded', 'false');
    document.removeEventListener('keydown', onEsc);
    document.removeEventListener('click', clickAway, true);
  }
  function onEsc(e){ if (e.key === 'Escape') closePanel(); }
  function clickAway(e){
    if (!panel.contains(e.target) && !toggle.contains(e.target)) closePanel();
  }

  toggle?.addEventListener('click', () => {
    const isOpen = !panel.classList.contains('hidden');
    isOpen ? closePanel() : openPanel();
  });
  close?.addEventListener('click', closePanel);

  // Don’t let clicks inside the dock fall through when it’s over content
  dock.addEventListener('click', e => e.stopPropagation());

  // Keep dock where it belongs
  placeDock();
  window.addEventListener('scroll', placeDock, { passive: true });
  window.addEventListener('resize', placeDock);

  // Safety: ensure it stays visible even if parent containers are overflow-hidden
  dock.style.pointerEvents = 'none';
  panel.style.pointerEvents = 'auto';
  toggle.style.pointerEvents = 'auto';
})();
</script>